import * as tslib_1 from "tslib";
/**
 * Created by ahsanayaz on 08/11/2016.
 */
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as Constants from './device-detector.constants';
import { ReTree } from './retree';
var DeviceDetectorService = /** @class */ (function () {
    function DeviceDetectorService(platformId) {
        this.platformId = platformId;
        this.ua = '';
        this.userAgent = '';
        this.os = '';
        this.browser = '';
        this.device = '';
        this.os_version = '';
        this.browser_version = '';
        this.reTree = new ReTree();
        if (isPlatformBrowser(this.platformId) && typeof window !== 'undefined') {
            this.userAgent = window.navigator.userAgent;
        }
        this.setDeviceInfo(this.userAgent);
    }
    /**
     * @author Ahsan Ayaz
     * @desc Sets the initial value of the device when the service is initiated.
     * This value is later accessible for usage
     */
    DeviceDetectorService.prototype.setDeviceInfo = function (ua) {
        var _this = this;
        if (ua === void 0) { ua = this.userAgent; }
        if (ua !== this.userAgent) {
            this.userAgent = ua;
        }
        var mappings = [
            { const: 'OS', prop: 'os' },
            { const: 'BROWSERS', prop: 'browser' },
            { const: 'DEVICES', prop: 'device' },
            { const: 'OS_VERSIONS', prop: 'os_version' },
        ];
        mappings.forEach(function (mapping) {
            _this[mapping.prop] = Object.keys(Constants[mapping.const]).reduce(function (obj, item) {
                if (Constants[mapping.const][item] === 'device') { // hack for iOS 13 Tablet
                    if (isPlatformBrowser(_this.platformId) &&
                        (!!_this.reTree.test(_this.userAgent, Constants.TABLETS_RE['iPad']) ||
                            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1))) {
                        obj[Constants[mapping.const][item]] = 'iPad';
                        return Object;
                    }
                }
                obj[Constants[mapping.const][item]] = _this.reTree.test(ua, Constants[mapping.const + "_RE"][item]);
                return obj;
            }, {});
        });
        mappings.forEach(function (mapping) {
            _this[mapping.prop] = Object.keys(Constants[mapping.const])
                .map(function (key) {
                return Constants[mapping.const][key];
            }).reduce(function (previousValue, currentValue) {
                if (mapping.prop === 'device' && previousValue === Constants[mapping.const].ANDROID) {
                    // if we have the actual device found, instead of 'Android', return the actual device
                    return (_this[mapping.prop][currentValue])
                        ? currentValue : previousValue;
                }
                else {
                    return (previousValue === Constants[mapping.const].UNKNOWN && _this[mapping.prop][currentValue])
                        ? currentValue : previousValue;
                }
            }, Constants[mapping.const].UNKNOWN);
        });
        this.browser_version = '0';
        if (this.browser !== Constants.BROWSERS.UNKNOWN) {
            var re = Constants.BROWSER_VERSIONS_RE[this.browser];
            var res = this.reTree.exec(ua, re);
            if (!!res) {
                this.browser_version = res[1];
            }
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Returns the device information
     * @returns the device information object.
     */
    DeviceDetectorService.prototype.getDeviceInfo = function () {
        var deviceInfo = {
            userAgent: this.userAgent,
            os: this.os,
            browser: this.browser,
            device: this.device,
            os_version: this.os_version,
            browser_version: this.browser_version
        };
        return deviceInfo;
    };
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the mobile devices to check
     * if the current device is a mobile and also check current device is tablet so it will return false.
     * @returns whether the current device is a mobile
     */
    DeviceDetectorService.prototype.isMobile = function (userAgent) {
        var _this = this;
        if (userAgent === void 0) { userAgent = this.userAgent; }
        if (this.isTablet(userAgent)) {
            return false;
        }
        var match = Object.keys(Constants.MOBILES_RE).find(function (mobile) {
            return _this.reTree.test(userAgent, Constants.MOBILES_RE[mobile]);
        });
        return !!match;
    };
    ;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the tablet devices to check
     * if the current device is a tablet.
     * @returns whether the current device is a tablet
     */
    DeviceDetectorService.prototype.isTablet = function (userAgent) {
        var _this = this;
        if (userAgent === void 0) { userAgent = this.userAgent; }
        if (isPlatformBrowser(this.platformId) &&
            (!!this.reTree.test(this.userAgent, Constants.TABLETS_RE['iPad']) ||
                (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1))) {
            return true;
        }
        var match = Object.keys(Constants.TABLETS_RE).find(function (mobile) {
            return !!_this.reTree.test(userAgent, Constants.TABLETS_RE[mobile]);
        });
        return !!match;
    };
    ;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the desktop devices to check
     * if the current device is a desktop device.
     * @returns whether the current device is a desktop device
     */
    DeviceDetectorService.prototype.isDesktop = function (userAgent) {
        if (userAgent === void 0) { userAgent = this.userAgent; }
        var desktopDevices = [
            Constants.DEVICES.PS4,
            Constants.DEVICES.CHROME_BOOK,
            Constants.DEVICES.UNKNOWN
        ];
        if (this.device === Constants.DEVICES.UNKNOWN) {
            if (this.isMobile(userAgent) || this.isTablet(userAgent)) {
                return false;
            }
        }
        return desktopDevices.indexOf(this.device) > -1;
    };
    ;
    DeviceDetectorService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DeviceDetectorService);
    return DeviceDetectorService;
}());
export { DeviceDetectorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZGV2aWNlLWRldGVjdG9yLyIsInNvdXJjZXMiOlsiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sS0FBSyxTQUFTLE1BQU0sNkJBQTZCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQVlsQztJQVVJLCtCQUF5QyxVQUFVO1FBQVYsZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQVRuRCxPQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ1IsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLE9BQUUsR0FBRyxFQUFFLENBQUM7UUFDUixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsV0FBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFHbEIsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1lBQ3JFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDZDQUFhLEdBQWIsVUFBYyxFQUFtQjtRQUFqQyxpQkFzREM7UUF0RGEsbUJBQUEsRUFBQSxLQUFLLElBQUksQ0FBQyxTQUFTO1FB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QTBCO1FBQTFCLDBCQUFBLEVBQUEsWUFBWSxJQUFJLENBQUMsU0FBUztRQUN2QyxJQUFNLGNBQWMsR0FBRztZQUNuQixTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDckIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQzdCLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTztTQUM1QixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzNDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN0RCxPQUFPLEtBQUssQ0FBQzthQUNoQjtTQUNKO1FBQ0QsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQUEsQ0FBQztJQXZKTyxxQkFBcUI7UUFEakMsVUFBVSxFQUFFO1FBV0ksbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBOztPQVZ2QixxQkFBcUIsQ0F3SmpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhKRCxJQXdKQztTQXhKWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgYWhzYW5heWF6IG9uIDA4LzExLzIwMTYuXG4gKi9cbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuL2RldmljZS1kZXRlY3Rvci5jb25zdGFudHMnO1xuaW1wb3J0IHsgUmVUcmVlIH0gZnJvbSAnLi9yZXRyZWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZUluZm8ge1xuICAgIHVzZXJBZ2VudDogc3RyaW5nO1xuICAgIG9zOiBzdHJpbmc7XG4gICAgYnJvd3Nlcjogc3RyaW5nO1xuICAgIGRldmljZTogc3RyaW5nO1xuICAgIG9zX3ZlcnNpb246IHN0cmluZztcbiAgICBicm93c2VyX3ZlcnNpb246IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZURldGVjdG9yU2VydmljZSB7XG4gICAgdWEgPSAnJztcbiAgICB1c2VyQWdlbnQgPSAnJztcbiAgICBvcyA9ICcnO1xuICAgIGJyb3dzZXIgPSAnJztcbiAgICBkZXZpY2UgPSAnJztcbiAgICBvc192ZXJzaW9uID0gJyc7XG4gICAgYnJvd3Nlcl92ZXJzaW9uID0gJyc7XG4gICAgcmVUcmVlID0gbmV3IFJlVHJlZSgpO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkKSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0RGV2aWNlSW5mbyh0aGlzLnVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAgICogQGRlc2MgU2V0cyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgZGV2aWNlIHdoZW4gdGhlIHNlcnZpY2UgaXMgaW5pdGlhdGVkLlxuICAgICAqIFRoaXMgdmFsdWUgaXMgbGF0ZXIgYWNjZXNzaWJsZSBmb3IgdXNhZ2VcbiAgICAgKi9cbiAgICBzZXREZXZpY2VJbmZvKHVhID0gdGhpcy51c2VyQWdlbnQpIHtcbiAgICAgICAgaWYgKHVhICE9PSB0aGlzLnVzZXJBZ2VudCkge1xuICAgICAgICAgIHRoaXMudXNlckFnZW50ID0gdWE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1hcHBpbmdzID0gW1xuICAgICAgICAgICAgeyBjb25zdCA6ICdPUycgLCBwcm9wOiAnb3MnfSxcbiAgICAgICAgICAgIHsgY29uc3QgOiAnQlJPV1NFUlMnICwgcHJvcDogJ2Jyb3dzZXInfSxcbiAgICAgICAgICAgIHsgY29uc3QgOiAnREVWSUNFUycgLCBwcm9wOiAnZGV2aWNlJ30sXG4gICAgICAgICAgICB7IGNvbnN0IDogJ09TX1ZFUlNJT05TJyAsIHByb3A6ICdvc192ZXJzaW9uJ30sXG4gICAgICAgIF07XG5cbiAgICAgICAgbWFwcGluZ3MuZm9yRWFjaCgobWFwcGluZykgPT4ge1xuICAgICAgICAgICAgdGhpc1ttYXBwaW5nLnByb3BdID0gT2JqZWN0LmtleXMoQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdKS5yZWR1Y2UoKG9iajogYW55LCBpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdW2l0ZW1dID09PSAnZGV2aWNlJykgeyAvLyBoYWNrIGZvciBpT1MgMTMgVGFibGV0XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICEhdGhpcy5yZVRyZWUudGVzdCh0aGlzLnVzZXJBZ2VudCwgQ29uc3RhbnRzLlRBQkxFVFNfUkVbJ2lQYWQnXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAobmF2aWdhdG9yLnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdW2l0ZW1dXSA9ICdpUGFkJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqW0NvbnN0YW50c1ttYXBwaW5nLmNvbnN0XVtpdGVtXV0gPSB0aGlzLnJlVHJlZS50ZXN0KHVhLCBDb25zdGFudHNbYCR7bWFwcGluZy5jb25zdH1fUkVgXVtpdGVtXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWFwcGluZ3MuZm9yRWFjaCgobWFwcGluZykgPT4ge1xuICAgICAgICAgICAgdGhpc1ttYXBwaW5nLnByb3BdID0gT2JqZWN0LmtleXMoQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdKVxuICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbnN0YW50c1ttYXBwaW5nLmNvbnN0XVtrZXldO1xuICAgICAgICAgICAgfSkucmVkdWNlKChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKG1hcHBpbmcucHJvcCA9PT0gJ2RldmljZScgJiYgcHJldmlvdXNWYWx1ZSA9PT0gQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdLkFORFJPSUQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIHRoZSBhY3R1YWwgZGV2aWNlIGZvdW5kLCBpbnN0ZWFkIG9mICdBbmRyb2lkJywgcmV0dXJuIHRoZSBhY3R1YWwgZGV2aWNlXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzW21hcHBpbmcucHJvcF1bY3VycmVudFZhbHVlXSlcbiAgICAgICAgICAgICAgICAgID8gY3VycmVudFZhbHVlIDogcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHByZXZpb3VzVmFsdWUgPT09IENvbnN0YW50c1ttYXBwaW5nLmNvbnN0XS5VTktOT1dOICYmIHRoaXNbbWFwcGluZy5wcm9wXVtjdXJyZW50VmFsdWVdKVxuICAgICAgICAgICAgICAgICAgPyBjdXJyZW50VmFsdWUgOiBwcmV2aW91c1ZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBDb25zdGFudHNbbWFwcGluZy5jb25zdF0uVU5LTk9XTik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYnJvd3Nlcl92ZXJzaW9uID0gJzAnO1xuICAgICAgICBpZiAodGhpcy5icm93c2VyICE9PSBDb25zdGFudHMuQlJPV1NFUlMuVU5LTk9XTikge1xuICAgICAgICAgICAgbGV0IHJlID0gQ29uc3RhbnRzLkJST1dTRVJfVkVSU0lPTlNfUkVbdGhpcy5icm93c2VyXTtcbiAgICAgICAgICAgIGxldCByZXMgPSB0aGlzLnJlVHJlZS5leGVjKHVhLCByZSk7XG4gICAgICAgICAgICBpZiAoISFyZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyb3dzZXJfdmVyc2lvbiA9IHJlc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgICAqIEBkZXNjIFJldHVybnMgdGhlIGRldmljZSBpbmZvcm1hdGlvblxuICAgICAqIEByZXR1cm5zIHRoZSBkZXZpY2UgaW5mb3JtYXRpb24gb2JqZWN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREZXZpY2VJbmZvKCk6IERldmljZUluZm8ge1xuICAgICAgICBjb25zdCBkZXZpY2VJbmZvOiBEZXZpY2VJbmZvID0ge1xuICAgICAgICAgICAgdXNlckFnZW50OiB0aGlzLnVzZXJBZ2VudCxcbiAgICAgICAgICAgIG9zIDogdGhpcy5vcyxcbiAgICAgICAgICAgIGJyb3dzZXI6IHRoaXMuYnJvd3NlcixcbiAgICAgICAgICAgIGRldmljZSA6IHRoaXMuZGV2aWNlLFxuICAgICAgICAgICAgb3NfdmVyc2lvbjogdGhpcy5vc192ZXJzaW9uLFxuICAgICAgICAgICAgYnJvd3Nlcl92ZXJzaW9uOiB0aGlzLmJyb3dzZXJfdmVyc2lvblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGV2aWNlSW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSBtb2JpbGUgZGV2aWNlcyB0byBjaGVja1xuICAgICAqIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIG1vYmlsZSBhbmQgYWxzbyBjaGVjayBjdXJyZW50IGRldmljZSBpcyB0YWJsZXQgc28gaXQgd2lsbCByZXR1cm4gZmFsc2UuXG4gICAgICogQHJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBtb2JpbGVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNNb2JpbGUodXNlckFnZW50ID0gdGhpcy51c2VyQWdlbnQpOiBib29sZWFuIHtcbiAgICAgIGlmICh0aGlzLmlzVGFibGV0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgbWF0Y2ggPSBPYmplY3Qua2V5cyhDb25zdGFudHMuTU9CSUxFU19SRSkuZmluZCgobW9iaWxlKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlVHJlZS50ZXN0KHVzZXJBZ2VudCwgQ29uc3RhbnRzLk1PQklMRVNfUkVbbW9iaWxlXSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIW1hdGNoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSB0YWJsZXQgZGV2aWNlcyB0byBjaGVja1xuICAgICAqIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldC5cbiAgICAgKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1RhYmxldCh1c2VyQWdlbnQgPSB0aGlzLnVzZXJBZ2VudCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSAmJlxuICAgICAgICAgIChcbiAgICAgICAgICAgICEhdGhpcy5yZVRyZWUudGVzdCh0aGlzLnVzZXJBZ2VudCwgQ29uc3RhbnRzLlRBQkxFVFNfUkVbJ2lQYWQnXSkgfHxcbiAgICAgICAgICAgIChuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSlcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hdGNoID0gT2JqZWN0LmtleXMoQ29uc3RhbnRzLlRBQkxFVFNfUkUpLmZpbmQoKG1vYmlsZSkgPT4ge1xuICAgICAgICAgIHJldHVybiAhIXRoaXMucmVUcmVlLnRlc3QodXNlckFnZW50LCBDb25zdGFudHMuVEFCTEVUU19SRVttb2JpbGVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAhIW1hdGNoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSBkZXNrdG9wIGRldmljZXMgdG8gY2hlY2tcbiAgICAgKiBpZiB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBkZXNrdG9wIGRldmljZS5cbiAgICAgKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIGRlc2t0b3AgZGV2aWNlXG4gICAgICovXG4gICAgcHVibGljIGlzRGVza3RvcCh1c2VyQWdlbnQgPSB0aGlzLnVzZXJBZ2VudCkge1xuICAgICAgICBjb25zdCBkZXNrdG9wRGV2aWNlcyA9IFtcbiAgICAgICAgICAgIENvbnN0YW50cy5ERVZJQ0VTLlBTNCxcbiAgICAgICAgICAgIENvbnN0YW50cy5ERVZJQ0VTLkNIUk9NRV9CT09LLFxuICAgICAgICAgICAgQ29uc3RhbnRzLkRFVklDRVMuVU5LTk9XTlxuICAgICAgICBdO1xuICAgICAgICBpZiAodGhpcy5kZXZpY2UgPT09IENvbnN0YW50cy5ERVZJQ0VTLlVOS05PV04pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTW9iaWxlKHVzZXJBZ2VudCkgfHwgdGhpcy5pc1RhYmxldCh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNrdG9wRGV2aWNlcy5pbmRleE9mKHRoaXMuZGV2aWNlKSA+IC0xO1xuICAgIH07XG59XG4iXX0=